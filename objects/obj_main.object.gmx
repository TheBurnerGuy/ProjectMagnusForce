<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_main</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Setup instance variables
life = 100;
energy = 100;
movementX = 0;
movementY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Movement modifiers
var acceleration = 1;
var deceleration = 2;
var standDeceleration = 0.5;
var sprintModifier = 1; // boolean for sprinting
var moveLimit = 10;

// Movement variables
var moveX = 0;
var moveY = 0;

// Get keyboard input
if keyboard_check(ord('A')) {
    moveX -= 1;
}
if keyboard_check(ord('D')) {
    moveX += 1;
}
if keyboard_check(ord('W')) {
    moveY -= 1;
}
if keyboard_check(ord('S')) {
    moveY += 1;
}
if keyboard_check(vk_shift) {
    sprintModifier = 2;
}

// Acceleration / Deceleration calculations
if (movementX * moveX &gt; 0) { // accelerating
    movementX = min(moveLimit, ( abs(moveX) * acceleration * sprintModifier + abs(movementX) )) * moveX;
} else if (movementX * moveX &lt; 0) { // decelerating
    movementX += moveX * sprintModifier;
} else {
    movementX = max(abs(movementX) - (abs(moveX) * standDeceleration), 0) * moveX;
}

if (movementY * moveY &gt; 0) { // accelerating
    movementY = min(moveLimit, ( abs(moveY) * acceleration * sprintModifier + abs(movementY) )) * moveY;
} else if (movementY * moveY &lt; 0) { // decelerating
    movementY += moveY * sprintModifier;
} else {
    movementY = max(abs(movementY) - (abs(moveY) * standDeceleration), 0) * moveY;
}

// Move and check for solid collision
if place_meeting(x + movementX, y, obj_wall) {
    if(moveX &gt; 0){
        move_contact_solid(0, -1);
    }else if(moveX &lt; 0){
        move_contact_solid(180, -1);
    }
} else {
    x += movementX;
}
if place_meeting(x, y + movementY, obj_wall) {
    if(moveY &gt; 0){
        move_contact_solid(270, -1);
    }else if(moveY &lt; 0){
        move_contact_solid(90, -1);
    }
} else {
    y += movementY;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
